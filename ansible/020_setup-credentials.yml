---
- hosts: localhost
  gather_facts: no

  vars:
    gce_credential_file_content: "{{ lookup('file', gce_credential_file) | from_json }}"
    twitter_cred_type_inputs:
      fields:
        - type: string
          id: app_key
          label: Application Key
        - type: string
          id: app_secret
          label: Application Secret
          secret: True
        - type: string
          id: bearer_token
          label: Bearer Token
          secret: True
        - type: string
          id: access_token
          label: Access Token
          secret: True
        - type: string
          id: token_secret
          label: Access Token Secret
          secret: True
      required:
        - app_key
        - app_secret
        - access_token
        - token_secret
    twitter_cred_type_injectors:
      extra_vars:
        app_key: "{{'{{ app_key }}'}}"
        app_secret: "{{'{{ app_secret }}'}}"
        bearer_token: "{{'{{ bearer_token }}'}}"
        token_key: "{{'{{ access_token }}'}}"
        token_secret: "{{'{{ token_secret }}'}}"


  tasks:
   - name: create twitter API credential type
     awx.awx.tower_credential_type:
       tower_config_file: files/empty.cfg
       tower_host: "{{ tower_host }}"
       tower_username: "{{ tower_user }}"
       tower_password: "{{ tower_password }}"
       validate_certs: no

       name: "Twitter API Credential type"
       kind: "cloud"
       description: "Twitter API Credential type"
       inputs:    "{{ twitter_cred_type_inputs }}"
       injectors: "{{ twitter_cred_type_injectors }}"
       state: present


   - name: create new Twitter API Credentials
     awx.awx.tower_credential:
       tower_config_file: files/empty.cfg
       tower_host: "{{ tower_host }}"
       tower_username: "{{ tower_user }}"
       tower_password: "{{ tower_password }}"
       validate_certs: no

       name: "Twitter API Credential"
       description: "Twitter API Credential"
       organization: Default
       state: present
       credential_type: "Twitter API Credential type"
       inputs:
        app_key: '{{ twitter_app_key }}'
        app_secret: '{{ twitter_app_secret }}'
        access_token: '{{ twitter_token_key }}'
        token_secret: '{{ twitter_token_secret }}'
     register: credential_create_gce


   - name: create new Google Credentials
     tower_credential:
       tower_host: "{{ tower_host }}"
       tower_username: "{{ tower_user }}"
       tower_password: "{{ tower_password }}"
       validate_certs: no

       name: "GCE Service Account for elk-demo"
       description: "GCE Service Account for elk-demo"
       organization: Default
       state: present
       kind: gce
       ssh_key_data: "{{ gce_credential_file_content.private_key }}"
       username: "{{ gce_credential_file_content.client_email }}"
       project: "{{ gce_credential_file_content.project_id }}"
     register: credential_create_gce

   - name: Debug credential create 
     debug:
        msg:  |
         {{ credential_create_gce }}
   
   - name: create credentials to connect to GIT
     tower_credential:
       tower_host: "{{ tower_host }}"
       tower_username: "{{ tower_user }}"
       tower_password: "{{ tower_password }}"
       validate_certs: no
       name: GitHub Credential
       organization: Default
       state: present
       kind: scm
       username: "{{ git_user }}"
       ssh_key_data: "{{ lookup('file', git_ssh_keyfile )  }}"
       ssh_key_unlock: "{{ git_ssh_keyfile_passphrase }}"
     register: credential_create_git

   - name: Debug credential create 
     debug:
        msg:  |
         {{ credential_create_git }}
   
   - name: create credentials to connect to VMs via ssh
     tower_credential:
       tower_host: "{{ tower_host }}"
       tower_username: "{{ tower_user }}"
       tower_password: "{{ tower_password }}"
       validate_certs: no
       name: VMs SSH Credential
       organization: Default
       state: present
       kind: ssh
       username: "{{ vms_user }}"
       ssh_key_data: "{{ lookup('file', vms_ssh_keyfile )  }}"
       ssh_key_unlock: "{{ vms_ssh_keyfile_passphrase }}"
     register: credential_create_vms

   - name: Debug credential create 
     debug:
        msg:  |
         {{ credential_create_vms }}
   
   - name: create vault credential to open vaulted files 
     tower_credential:
       tower_host: "{{ tower_host }}"
       tower_username: "{{ tower_user }}"
       tower_password: "{{ tower_password }}"
       validate_certs: no
       name: Vault Key
       description: Vault Key for vaulted var files
       organization: Default
       state: present
       kind: vault
       vault_password: "{{ vault_key }}"
     register: credential_create_vault

   - name: Debug credential create 
     debug:
        msg:  |
         {{ credential_create_vault }}
   
